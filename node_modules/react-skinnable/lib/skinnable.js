'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = skinnable;

var _tcomb = require('tcomb');

var _tcomb2 = _interopRequireDefault(_tcomb);

var _isReactClassComponent = require('./isReactClassComponent');

var _isReactClassComponent2 = _interopRequireDefault(_isReactClassComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultGetLocals = function defaultGetLocals(props) {
  return props;
}; // identity function that return "props"

function skinnable(template) {

  return function (Component) {

    // validate "template" and "Component" arguments when not in production
    if (process.env.NODE_ENV !== 'production') {
      var name = Component.name;
      _tcomb2.default.assert(_tcomb2.default.maybe(_tcomb2.default.Function).is(template), '@skinnable decorator can only be configured with a function');
      _tcomb2.default.assert((0, _isReactClassComponent2.default)(Component), '@skinnable decorator can only be applied to React.Component(s). Maybe did you type @skinnable instead of @skinnable()?');
      _tcomb2.default.assert(!_tcomb2.default.Function.is(Component.prototype.render), '@skinnable decorator can only be applied to components not implementing the render() method. Please remove the render method of component ' + name);
      _tcomb2.default.assert(_tcomb2.default.maybe(_tcomb2.default.Function).is(Component.prototype.getLocals), '@skinnable decorator requires getLocals() to be a function, check the component ' + name);
      if (template) {
        _tcomb2.default.assert(!_tcomb2.default.Function.is(Component.prototype.template), '@skinnable decorator can only be applied to components not implementing the template(locals) method. Please remove the template method of component ' + name);
      } else {
        _tcomb2.default.assert(_tcomb2.default.Function.is(Component.prototype.template), '@skinnable decorator requires a template(locals) method, add it to component ' + name);
      }
    }

    if (template) {
      Component.prototype.template = template;
    }

    // use default "getLocals" function if component is missing one
    if (!Component.prototype.getLocals) {
      Component.prototype.getLocals = defaultGetLocals;
    }

    // overwrite "render" method
    Component.prototype.render = function () {
      return this.template(this.getLocals(this.props));
    };
  };
}