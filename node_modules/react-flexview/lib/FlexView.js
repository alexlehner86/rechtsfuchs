'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Props = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _some = require('lodash/some');

var _some2 = _interopRequireDefault(_some);

var _tcombReact = require('tcomb-react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function warn(warning) {
  if (process.env.NODE_ENV !== 'production') {
    console.warn(warning); // eslint-disable-line no-console
  }
}

var Props = exports.Props = {
  children: _tcombReact.t.ReactChildren,
  column: _tcombReact.t.maybe(_tcombReact.t.Boolean),
  vAlignContent: _tcombReact.t.maybe(_tcombReact.t.enums.of(['top', 'center', 'bottom'])),
  hAlignContent: _tcombReact.t.maybe(_tcombReact.t.enums.of(['left', 'center', 'right'])),
  marginLeft: _tcombReact.t.maybe(_tcombReact.t.union([_tcombReact.t.String, _tcombReact.t.Number])),
  marginTop: _tcombReact.t.maybe(_tcombReact.t.union([_tcombReact.t.String, _tcombReact.t.Number])),
  marginRight: _tcombReact.t.maybe(_tcombReact.t.union([_tcombReact.t.String, _tcombReact.t.Number])),
  marginBottom: _tcombReact.t.maybe(_tcombReact.t.union([_tcombReact.t.String, _tcombReact.t.Number])),
  grow: _tcombReact.t.maybe(_tcombReact.t.union([_tcombReact.t.Boolean, _tcombReact.t.Number])),
  shrink: _tcombReact.t.maybe(_tcombReact.t.union([_tcombReact.t.Boolean, _tcombReact.t.Number])),
  basis: _tcombReact.t.maybe(_tcombReact.t.union([_tcombReact.t.String, _tcombReact.t.Number])),
  wrap: _tcombReact.t.maybe(_tcombReact.t.Boolean),
  height: _tcombReact.t.maybe(_tcombReact.t.union([_tcombReact.t.String, _tcombReact.t.Number])),
  width: _tcombReact.t.maybe(_tcombReact.t.union([_tcombReact.t.String, _tcombReact.t.Number])),
  className: _tcombReact.t.maybe(_tcombReact.t.String),
  style: _tcombReact.t.maybe(_tcombReact.t.Object)
};

/** React component to abstract over flexbox
 * @param children - flexView content
 * @param column - flex-direction: column
 * @param vAlignContent - align content vertically
 * @param hAlignContent - align content horizontally
 * @param marginLeft - margin-left property ("auto" to align self right)
 * @param marginTop - margin-top property ("auto" to align self bottom)
 * @param marginRight - margin-right property ("auto" to align self left)
 * @param marginBottom - margin-bottom property ("auto" to align self top)
 * @param grow property (for parent primary axis)
 * @param shrink - flex-shrink property
 * @param basis - flex-basis property
 * @param wrap - wrap content
 * @param height - height property (for parent secondary axis)
 * @param width - width property (for parent secondary axis)
 */
var FlexView = (_dec = (0, _tcombReact.props)(Props, { strict: false }), _dec(_class = function (_React$Component) {
  _inherits(FlexView, _React$Component);

  function FlexView() {
    _classCallCheck(this, FlexView);

    return _possibleConstructorReturn(this, (FlexView.__proto__ || Object.getPrototypeOf(FlexView)).apply(this, arguments));
  }

  _createClass(FlexView, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.logWarnings();
    }
  }, {
    key: 'logWarnings',
    value: function logWarnings() {
      var _props = this.props,
          basis = _props.basis,
          shrink = _props.shrink,
          grow = _props.grow,
          hAlignContent = _props.hAlignContent,
          vAlignContent = _props.vAlignContent,
          children = _props.children,
          column = _props.column;


      if (basis === 'auto') {
        warn('basis is "auto" by default: forcing it to "auto"  will leave "shrink:true" as default');
      }

      if ((shrink === false || shrink === 0) && (grow === true || typeof grow === 'number' && grow > 0)) {
        warn('passing both "grow" and "shrink={false}" is a no-op!');
      }

      if (process.env.NODE_ENV !== 'production' && !_tcombReact.t.Nil.is(children) && !column && hAlignContent === 'center') {
        var atLeastOneChildHasHMarginAuto = (0, _some2.default)([].concat(children), function (child) {
          var _ref = _tcombReact.t.Object.is(child) ? child : {},
              _ref$props = _ref.props,
              props = _ref$props === undefined ? {} : _ref$props;

          var _props$style = props.style,
              style = _props$style === undefined ? {} : _props$style;


          var marginLeft = style.marginLeft || props.marginLeft;
          var marginRight = style.marginRight || props.marginRight;
          return marginLeft === 'auto' && marginRight === 'auto';
        });

        atLeastOneChildHasHMarginAuto && warn('In a row with hAlignContent="center" there should be no child with marginLeft and marginRight set to "auto"\nhttps://github.com/buildo/react-flexview/issues/30');
      }

      if (process.env.NODE_ENV !== 'production' && !_tcombReact.t.Nil.is(children) && column && vAlignContent === 'center') {
        var atLeastOneChildHasVMarginAuto = (0, _some2.default)([].concat(children), function (child) {
          var _ref2 = _tcombReact.t.Object.is(child) ? child : {},
              _ref2$props = _ref2.props,
              props = _ref2$props === undefined ? {} : _ref2$props;

          var _props$style2 = props.style,
              style = _props$style2 === undefined ? {} : _props$style2;


          var marginTop = style.marginTop || props.marginTop;
          var marginBottom = style.marginBottom || props.marginBottom;
          return marginTop === 'auto' && marginBottom === 'auto';
        });

        atLeastOneChildHasVMarginAuto && warn('In a column with vAlignContent="center" there should be no child with marginTop and marginBottom set to "auto"\nhttps://github.com/buildo/react-flexview/issues/30');
      }
    }
  }, {
    key: 'getGrow',
    value: function getGrow() {
      var grow = this.props.grow;

      if (typeof grow === 'number') {
        return grow;
      } else if (grow) {
        return 1;
      }

      return 0; // default
    }
  }, {
    key: 'getShrink',
    value: function getShrink() {
      var _props2 = this.props,
          shrink = _props2.shrink,
          basis = _props2.basis;

      if (typeof shrink === 'number') {
        return shrink;
      } else if (shrink) {
        return 1;
      } else if (shrink === false) {
        return 0;
      }

      if (basis && basis !== 'auto') {
        return 0;
      }

      return 1; // default
    }
  }, {
    key: 'getBasis',
    value: function getBasis() {
      var basis = this.props.basis;

      if (basis) {
        var suffix = _tcombReact.t.Number.is(basis) || String(parseInt(basis, 10)) === basis ? 'px' : '';
        return basis + suffix;
      }

      return 'auto'; // default
    }
  }, {
    key: 'getFlexStyle',
    value: function getFlexStyle() {
      var grow = this.getGrow();
      var shrink = this.getShrink();
      var basis = this.getBasis();
      var values = grow + ' ' + shrink + ' ' + basis;
      return {
        WebkitBoxFlex: values,
        MozBoxFlex: values,
        msFlex: values,
        WebkitFlex: values,
        flex: values
      };
    }
  }, {
    key: 'getStyle',
    value: function getStyle() {
      var style = (0, _pick2.default)(this.props, ['width', 'height', 'marginLeft', 'marginTop', 'marginRight', 'marginBottom']);
      return _extends({}, this.getFlexStyle(), style, this.props.style);
    }
  }, {
    key: 'getContentAlignmentClasses',
    value: function getContentAlignmentClasses() {
      var vPrefix = this.props.column ? 'justify-content-' : 'align-content-';
      var hPrefix = this.props.column ? 'align-content-' : 'justify-content-';

      var vAlignContentClasses = {
        top: vPrefix + 'start',
        center: vPrefix + 'center',
        bottom: vPrefix + 'end'
      };

      var hAlignContentClasses = {
        left: hPrefix + 'start',
        center: hPrefix + 'center',
        right: hPrefix + 'end'
      };

      var vAlignContent = vAlignContentClasses[this.props.vAlignContent];
      var hAlignContent = hAlignContentClasses[this.props.hAlignContent];

      return (0, _classnames2.default)(vAlignContent, hAlignContent);
    }
  }, {
    key: 'getClasses',
    value: function getClasses() {
      var direction = this.props.column && 'flex-column';
      var contentAlignment = this.getContentAlignmentClasses();
      var wrap = this.props.wrap && 'flex-wrap';
      return (0, _classnames2.default)('react-flex-view', direction, contentAlignment, wrap, this.props.className);
    }
  }, {
    key: 'render',
    value: function render() {
      var className = this.getClasses();
      var style = this.getStyle();
      var props = (0, _omit2.default)(this.props, Object.keys(Props));
      return _react2.default.createElement(
        'div',
        _extends({ className: className, style: style }, props),
        this.props.children
      );
    }
  }]);

  return FlexView;
}(_react2.default.Component)) || _class);
exports.default = FlexView;