class Example extends React.Component {

  constructor() {
    super();
    this.state = {};
  }

  componentDidMount() {
    this.updateOutput();
  }

  updateOutput = () => (
    this.setState({ flex: ReactDOM.findDOMNode(this.refs.output).style.flex })
  );

  linkState = key => ({
    value: this.state[key],
    requestChange: (value) => {
      this.setState({ [key]: value });
      setTimeout(this.updateOutput);
    }
  });

  getValues = () => {
    const { grow, shrink, basis } = this.state || {};
    return {
      grow: grow === 'true' ? true : (grow === 'false' ? false : (parseInt(grow) || undefined)),
      shrink: shrink === 'true' ? true : (shrink === 'false' ? false : (parseInt(shrink) || undefined)),
      basis: String(parseInt(basis)) === basis ? parseInt(basis) : basis
    };
  };

  render = () => (
    <div column>
      <h2>Input</h2>
      <div>
        <input placeholder='grow' valueLink={this.linkState('grow')} />
        <input placeholder='shrink' valueLink={this.linkState('shrink')} />
        <input placeholder='basis' valueLink={this.linkState('basis')} />
      </div>
      <FlexView {...this.getValues()} style={{  }} ref='output' />
      <h2>Output</h2>
      <input value={this.state.flex} readOnly />
    </div>
  );

}
